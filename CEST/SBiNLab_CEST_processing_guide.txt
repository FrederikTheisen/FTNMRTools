################################
### Processing the CEST data ###
################################
### Frederik Theisen 2022
### Made for SBiN-Lab NMR processing pipeline

Download the necessary files and put in folders:
fid.com => experiment/
proc.com => experiment/
make2d.com => experiment/
stPeakList.pl => experiment/data (does not exist before running proc.com)
For each file go to properties and change the permission to allow execution as script
If you get a permission error: chmod 777 <scriptname>

- Open experiment in bruker console (bruker)
-- read parameters
-- read the 'other options' header and put in the fid.com
-- read the y axis total points (real/valid). Input in column two of included fid.com file
-- read the z axis #B1 offsets and input in third column (Real). Both the N and T of the B1 dimension should be the same.
-- copy-pasting the generated bruker script is also an option, though care must be taken to avoid mistakes
-- for the 15N CEST pulseprograms the saturation dimension is the y dimension (as given in the example fid.com file), this might be different for 13C CEST
- Run calcOffset in experiment folder and input your 1D SF value
-- input reference values in fid.com
- Run fid.com
- Run proc.com
- Open nmrDraw
-- phase spectrum (example proc is probably phased for 15N CEST)
-- input phase in proc.com
- Reprocess using proc.com
- Run make2d.proc to modify spectra for input into ccpnmr analysis

### Peak positions ###
### Prepare a Sparky peak list which will be used to extract intensities at the peak positions.
- Import recorded HSQC from CEST folder (test001.ft2) and assign peaks
- In CcpNmr Analysis: Format -> Export -> Sparky -> Peaks
-- Sparky list should contain assign w1 w2 height volume
-- Two residues cannot have the same number

### Extracting the peak information ###
Extract intensities of peaks as a function of B1 offset using getIntTable.pl script.
The script runs the seriesTab script which will output a file called 'peaks.ser'
Usage: getIntTable.pl
- Run the getIntTable.pl script
-- File should contain peak position information, assignment (eg: G343HN-G343N) followed by intensities (first should be 1.000, following should be less than 1)
-- Errors in the .ser file might be caused by errors in the sparky peak list

### Prepare data folder for further analysis ###
- Rename the peaks.ser to <B1>.ser
-- eg for a B1 = 12.5 Hz: 12p5.ser or 12_5.ser
- Save file along with the fqXlist (probably fq1list or fq3list) file from the experiment folder
In the end you should have a folder (referred to as the INPUT FOLDER later) with the following files (example):
fq1list
6p25.ser
12_5.ser
25.ser

#######################
### ChemEx Analysis ###
#######################
ChemEx is a CLI (Command Line Interface) tool for analysis of NMR data. Written in python and can thus be adapted for specific needs.
For ChemEx processing you need to install ChemEx in a conda environment with Python 3.9
ChemEx requirements may change and might not be updated here
- Install conda 
- Create new environment:
-- conda create -n chemex python=3.9
Activate conda environment and intall ChemEx:
- conda activate chemex
- pip install git+https://github.com/gbouvignies/chemex.git
OR CHEMEX_FFT (Includes three-state peak picking and overlap detect model, install in new conda env 'chemex_fft')
- pip install git+https://github.com/FrederikTheisen/chemex_FFT.git

### Prepare your data for ChemEx ###
- Navigate your terminal to a suitable folder (experiment specific). Your data processing will happen here and you will run chemex from this folder.
- Download the makechemex.py script and put it in the suitable folder. 
- Open the script and check that the settings in the top matches your requirements. Modify as needed.
- Run the script with your input folder as argument:
-- python3 makechemex.py <input folder>
The makechemex.py script will setup an appropriate folder structure and create a script called 'guide.sh'. Avoid running the script.
The guide.sh file contains a guide for what to do next.
- Pick ground and minor states (if any minor states)
- Run no exchange fit
-- Examine fits
- Run two-state model fit
-- Examine
- Cluster residues with exchange using PB/KEX. Parameters can be collected using the 'gather.py' script. Modify as needed.
- Consider globally fitting clusters (this can take significant time (advanced model = several days!))
-- Lack of error indicates that parameters are covariant (thus error = very high). Consider constraining one or more paramters.

#########################
### RING NMR Analysis ###
#########################
### RING NMR is preinstalled on SBiN-Lab computers and provides user friendly GUI for analysis.
### Not yet implemented
### RingNMR project setup script is currently not compatible with the .ser file format provided by this processing pipeline
### When using RING-NMR, disable as much error estimation as possible until a final fit is desired.
